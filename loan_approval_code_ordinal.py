# -*- coding: utf-8 -*-
"""Lab_6_Code_Ordinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tYxKjCB3NrTHfXR-RrV6PbyvYVRSnAF9
"""

import pandas as pd

allData = pd.read_csv("NewLoanData.csv")
allData

# get data types
allData.dtypes

# Risk, Credit, and Approved are categorical, and need to be convereted to numbers

print('uniue values of the target attribute (Approved):', allData.Approved.unique())

# create a new column for target attribute
allData['Approved_val'] = allData['Approved']
# manually assing 1/0 to Yes/No
# note that we use a different method than LAB 4
allData['Approved_val'] = allData['Approved_val'].map({'Yes': 1, 'No': 0})

allData

"""Assume Risk and Credit are **Ordinal Attributes** and **have natural order**



"""

print('unique values of attribute Risk:', allData.Risk.unique())
# create a new column for Risk attribute
allData['Risk_val'] = allData['Risk']
# assuming Risk is an Ordinal attribute, with natural order, manually assign values
# note that we use a different method than LAB 4
allData['Risk_val'] = allData['Risk_val'].map({'Low': 0, 'Medium': 1, 'High': 2, 'Very High': 3})

allData

print('unique values of attribute Credit:', allData.Credit.unique())
# create a new column for Credit attribute
allData['Credit_val'] = allData['Credit']
# assuming Credit is an Ordinal attribute, with natural order
allData['Credit_val'] = allData['Credit_val'].map({'Very Low': 0, 'Low': 1, 'Good': 2, 'Very Good': 3, 'Excellent': 4})

allData

"""**Splittig data into Train and Test**"""

# splitting the data into train and test sets
from sklearn.model_selection import train_test_split

all_y = allData['Approved_val']
# we use four attributes to build the tree
all_X = allData[['Risk_val', 'Length', 'Credit_val', 'Balance']]

# 70% training set and 30% test set
train_X, test_X, train_y, test_y = train_test_split(all_X, all_y, test_size=0.3, random_state=42)

print('length of train:', len(train_X))
print('length of test:', len(test_X))

"""**Build a Decision Tree**"""

from sklearn import tree
tree1 = tree.DecisionTreeClassifier()
tree1.fit(train_X, train_y)

"""**Evaluate the Decision Tree**"""

predictions = tree1.predict(test_X)

from sklearn.metrics import accuracy_score
print(accuracy_score(test_y, predictions))

"""**Visualize the tree**"""

tree.plot_tree(tree1)

